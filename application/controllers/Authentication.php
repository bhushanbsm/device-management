<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Authentication extends CI_Controller {

	function __construct()
	{
		parent::__construct();
		$this->load->model('Authentication_model');
	}

	public function forgotpassword()
	{
		$this->load->view('authentication/forgotpassword');
	}

	/**
	Generates Password random code and link to redirect to input new password
	*/
	public function get_reset_link()
	{
		$this->form_validation->set_rules('username', 'Username', 'required|callback_valid_user');
		if ($this->form_validation->run() == FALSE) {
			echo json_encode(['status' => 0, 'error' => validation_errors()]);
		} else {
			$param = $this->input->post('username');
			$key = strstr($param, '@') ? 'email' : 'username';
			$data[$key] = $param;
			$result = $this->Authentication_model->read_user($data);
			$token = json_encode(['token' => random_int(1000, 9999),
				'data' => $param,
				'uid' => $result['uid'],
				'expire' => time()+3600 ]);
			$reset_link = base_url()."reset-your-password/".base64url_encode($token);
			$message = "The user account ".$param ." at ".$_SERVER['SERVER_NAME']." has this email associated with it.A Web user from ".$_SERVER['HTTP_HOST']." has just requested a Confirmation Code to change the password.<br/><br/>Please click on this link below to confirm you really want a new password <a href='".$reset_link."'>".$reset_link."</a><br/><br/> If you didn't asked for this, don't worry. Just delete this Email.";

			$subject = "Password Reset Confirmation Link for ".$param;
			$this->load->library('email');
			$config['mailtype'] = 'html';
			$this->email->initialize($config);
			$this->email->from(NO_REPLY_EMAIL, EMAIL_NAME);
			$this->email->to($result['email']);
			$this->email->subject($subject);
			$this->email->message($message);
			if (!$this->email->send()) {
				echo json_encode(['status' => 0, 'error' => 'Server error, Please try after some time.']);
				return;
			}
			if(!$this->Authentication_model->update_user(['token' => $token], $result['uid'])){
				echo json_encode(['status' => 0, 'error' => 'Server error, Please try after some time.']);
				return;
			}
			echo json_encode(['status' => 1, 'error' => 'Please check your email for confirmation link.']);
		}
	}

	/**
		Accepts token string generated by user and checks for its validity.
		On valid token user is sent to enter new password.
		if invalid token is submited, error will throw.
		if new password is submited, again token is validated and password gets saved in db.
	*/
		public function reset_your_password($tokenString='')
		{
			if ($tokenString) {
				$token = json_decode(base64url_decode($tokenString), TRUE);
				$result = $this->Authentication_model->read_user(['uid' => $token['uid']]);
				$dbToken = json_decode($result['token'], TRUE);
				if (($token['expire'] == $dbToken['expire']) 
					&& ($dbToken['expire'] > time())
					&& ($token['token'] == $dbToken['token'])) {
					if ($this->input->post('submit')) {
						$this->form_validation->set_rules('password', 'Password', 'trim|required|min_length[8]|max_length[32]');
						$this->form_validation->set_rules('conf_password', 'Conf Password', 'trim|required|matches[password]');
						if ($this->form_validation->run() == FALSE) {
							$data['error'] = validation_errors();
						} else {
							if(!$this->Authentication_model->update_user(['password' => md5($this->input->post('password'))], $result['uid'])){
								$data['error'] = 'Server error, Please try after some time.';
							}else{
								redirect('login','refresh');
							}
						}
					}else{
						$data['error'] = '';
					}
				}else{
					$data['error'] = 'Invallid Token.';
				}
			}else{
				$data['error'] = 'Missing Token.';
			}
			$data['token'] = $tokenString;
			$this->load->view('authentication/reset_password',$data);
		}

	/*
		callback function to check user is available in db or not.
	*/
		public function valid_user($param='')
		{
			$key = strstr($param, '@') ? 'email' : 'username';
			$data[$key] = $param;
			if(!$this->Authentication_model->login_check($data)) {
				$this->form_validation->set_message('valid_user','Wrong Username Or Email');
				return FALSE;
			}
			return TRUE;
		}

		public function index()
		{
			if (user_logged_in()) {
				redirect('dashboard','refresh');
			}else {
				$this->load->view('authentication/login');
			}
		}

	/*
		validate and login user and save session as well as cookie.
	*/
		public function dologin()
		{
			$this->form_validation->set_rules('username', 'Username', 'required');
			$this->form_validation->set_rules('password', 'Password', 'required|callback_login_check');
			if ($this->form_validation->run() == FALSE) {
				echo json_encode(['status' => 0, 'error' => validation_errors()]);
			} else {
				$data['username'] = $this->input->post('username');
				$result = $this->Authentication_model->read_user($data);
				unset($result['token']);
				unset($result['dateCreated']);
				if ($this->input->post('remember')) {
					$info = base64_encode(implode(':', $result));
					$carray = array(
						'name' =>'user',
						'value' => $info,
						'expire' => '3600',
						'path'   => '/');
					set_cookie($carray,TRUE);
				}
				unset($result['password']);
				$result['loggedin'] = 1;
				$this->session->set_userdata( $result );
				echo json_encode(['status' => 1, 'error' => '']);
			}
		}

	/*
		Callback function to validate user
	*/
		public function login_check($password)
		{
			$data['username'] = $this->input->post('username');
			$data['password'] = md5($this->input->post('password'));
			if (!$this->Authentication_model->login_check($data)) {
				$this->form_validation->set_message('login_check','Wrong Username Or Password');
				return FALSE;
			}
			return TRUE;
		}

	/*
		Registration of new Implementor or admin.
		Superadmin can add admin and Implementor.
		Admin can add Implementor.
	*/
		public function register()
		{
			if (!user_logged_in()) {
				redirect('login','refresh');
			}
			if ($this->session->account>2) {
				redirect('dashboard','refresh');
			}
			$temp = $this->Authentication_model->get_roles();
			$data['account'] = [];
			foreach ($temp as $key => $value) {
				$data['account'] += [$value['role_id'] => $value['role']];
			}
			$this->load->view('authentication/register', $data);
		}

		/*
			Validate form and save user.
		*/
			public function doregister()
			{
			// only logged in Superadmin and admin can add new user
				if (!user_logged_in() || $this->session->account>2) {
					echo json_encode(['status' => 0, 'error' => 'You can not perform this operation.']);
					return;
				}
				$this->form_validation->set_rules('fname', 'First Name', 'trim|required|min_length[4]|max_length[32]');
				$this->form_validation->set_rules('lname', 'Last Name', 'trim|required|min_length[4]|max_length[32]');
				$this->form_validation->set_rules('username', 'Username', 'trim|required|min_length[4]|max_length[32]');
				$this->form_validation->set_rules('password', 'Password', 'trim|required|min_length[8]|max_length[32]');
				$this->form_validation->set_rules('conf_password', 'Conf Password', 'trim|required|matches[password]');
				$this->form_validation->set_rules('email', 'Email', 'trim|required|valid_email');
				if ($this->form_validation->run() == FALSE) {
					echo json_encode(['status' => 0, 'error' => validation_errors()]);
				} else {
					$data['username'] = $this->input->post('username');
					$data['email'] = $this->input->post('email');
					$data['password'] = md5($this->input->post('password'));
					$data['fname'] = $this->input->post('fname');
					$data['lname'] = $this->input->post('lname');
					$data['phone'] = $this->input->post('phone');
					$data['account'] = $this->input->post('account');
					$result = $this->Authentication_model->write_user($data);
					if ($result) {
						echo json_encode(['status' => 1, 'error' => '']);
					}else{
						echo json_encode(['status' => 0, 'error' => 'Failed to add user.']);
					}
				}
			}

		}
